{"version":3,"sources":["page-sections/authentication/RootLayout.jsx","pages/authentication/two-step-verification.jsx","components/flexbox/FlexRowAlign.jsx","../node_modules/@mui/material/Grid/GridContext.js","../node_modules/@mui/material/Grid/gridClasses.js","../node_modules/@mui/material/Grid/Grid.js","../node_modules/@mui/system/esm/styled.js"],"names":["RootLayout","children","imgLink","downMd","useMediaQuery","theme","breakpoints","down","container","height","item","md","xs","order","sx","padding","backgroundColor","width","alt","src","StyledInput","styled","outline","fontSize","fontWeight","borderRadius","textAlign","border","palette","grey","TwoStepVerification","maxWidth","mt","color","gap","mb","justifyContent","type","maxLength","variant","fullWidth","FlexRowAlign","props","display","alignItems","GridContext","React","getGridUtilityClass","slot","generateUtilityClass","GRID_SIZES","gridClasses","generateUtilityClasses","map","spacing","direction","wrap","size","_excluded","getOffset","val","parse","parseFloat","String","replace","extractZeroValueBreakpointKeys","values","nonZeroKey","Object","keys","forEach","key","sortedBreakpointKeysByValue","sort","a","b","slice","indexOf","GridRoot","name","overridesResolver","styles","ownerState","zeroMinWidth","spacingStyles","Number","isNaN","breakpoint","value","push","resolveSpacingStyles","breakpointsStyles","root","_extends","boxSizing","flexWrap","margin","minWidth","directionValues","resolveBreakpointValues","handleBreakpoints","propValue","output","flexDirection","rowSpacing","zeroValueBreakpointKeys","rowSpacingValues","_zeroValueBreakpointK","themeSpacing","marginTop","paddingTop","includes","columnSpacing","columnSpacingValues","_zeroValueBreakpointK2","marginLeft","paddingLeft","reduce","globalStyles","flexBasis","flexGrow","flexShrink","columnsBreakpointValues","columns","columnValue","undefined","Math","round","more","assign","up","useUtilityClasses","classes","spacingClasses","className","resolveSpacingClasses","breakpointsClasses","slots","composeClasses","Grid","inProps","ref","themeProps","useThemeProps","useTheme","extendSxProp","columnsProp","columnSpacingProp","component","rowSpacingProp","other","_objectWithoutPropertiesLoose","columnsContext","breakpointsValues","otherFiltered","_jsx","Provider","clsx","as","createStyled"],"mappings":"gIAAA,+CA4BeA,IAxBI,SAAH,GAGT,IAFLC,EAAQ,EAARA,SACAC,EAAO,EAAPA,QAEMC,EAASC,aAAc,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,KAAK,KAAK,IAClE,OAAO,eAAC,IAAI,CAACC,WAAS,EAACC,OAAO,OAAM,UAChC,cAAC,IAAI,CAACC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,MAAOV,EAAS,EAAI,EAAE,SAC9C,cAAC,IAAY,CAACW,GAAI,CAClBC,QAAS,EACTN,OAAQ,OACRO,gBAAiB,YACjB,SACE,cAAC,IAAG,UACF,qBAAKC,MAAM,OAAOC,IAAI,kBAAkBC,IAAKjB,UAKnD,cAAC,IAAI,CAACQ,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,MAAOV,EAAS,EAAI,EAAE,SAC7CF,MAGT,C,oCC1BA,gFAOMmB,EAAcC,YAAO,QAAPA,EAAgB,gBAClChB,EAAK,EAALA,MAAK,MACA,CACLY,MAAO,GACPR,OAAQ,GACRa,QAAS,EACTC,SAAU,GACVC,WAAY,IACZC,aAAc,MACdC,UAAW,SACXV,gBAAiB,cACjBW,OAAO,aAAD,OAAetB,EAAMuB,QAAQC,KAAK,MACzC,IAmCcC,UAjCa,WAC1B,OAAO,cAAC,IAAU,CAAC5B,QAAQ,2CAA0C,SACjE,cAAC,IAAY,CAACO,OAAO,OAAM,SACzB,eAAC,IAAG,CAACiB,UAAU,SAASK,SAAU,IAAKd,MAAM,OAAOF,QAAS,EAAE,UAC7D,qBAAKI,IAAI,+BAA+BF,MAAO,GAAIC,IAAI,SACvD,cAAC,IAAE,CAACM,WAAY,IAAKQ,GAAI,EAAE,SAAC,0BAG5B,cAAC,IAAS,CAACC,MAAM,gBAAgBT,WAAY,IAAI,SAAC,qDAIlD,iCACE,cAAC,IAAK,CAACQ,GAAI,EAAE,SAAC,sCAEd,eAAC,IAAO,CAACE,IAAK,EAAGF,GAAI,EAAGG,GAAI,EAAGC,eAAe,SAAQ,UACpD,cAAChB,EAAW,CAACiB,KAAK,OAAOC,UAAW,IACpC,cAAClB,EAAW,CAACiB,KAAK,OAAOC,UAAW,IACpC,cAAClB,EAAW,CAACiB,KAAK,OAAOC,UAAW,IACpC,cAAClB,EAAW,CAACiB,KAAK,OAAOC,UAAW,IACpC,cAAClB,EAAW,CAACiB,KAAK,OAAOC,UAAW,IACpC,cAAClB,EAAW,CAACiB,KAAK,OAAOC,UAAW,OAGtC,cAAC,IAAM,CAACC,QAAQ,YAAYC,WAAS,WAAC,oBAOlD,C,qFC3CeC,IAPM,SAAH,OAChBxC,EAAQ,EAARA,SACGyC,EAAK,wBACJ,cAAC,IAAG,yBAACC,QAAQ,OAAOC,WAAW,SAASR,eAAe,UAAaM,GAAK,aAC1EzC,IACI,C,qICEM4C,MAJkBC,kB,kBCH1B,SAASC,EAAoBC,GAClC,OAAOC,YAAqB,UAAWD,EACzC,CACA,IAGME,EAAa,CAAC,QAAQ,EAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAUtDC,EATKC,YAAuB,UAAW,CAAC,OAAQ,YAAa,OAAQ,gBAAc,mBAJjF,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAMpCC,KAAI,SAAAC,GAAO,2BAAkBA,EAAO,KAAG,YALhC,CAAC,iBAAkB,SAAU,cAAe,OAOjDD,KAAI,SAAAE,GAAS,6BAAoBA,EAAS,KAAG,YAN7C,CAAC,SAAU,eAAgB,QAQhCF,KAAI,SAAAG,GAAI,wBAAeA,EAAI,KAAG,YAEpCN,EAAWG,KAAI,SAAAI,GAAI,wBAAeA,EAAI,KAAG,YAAKP,EAAWG,KAAI,SAAAI,GAAI,wBAAeA,EAAI,KAAG,YAAKP,EAAWG,KAAI,SAAAI,GAAI,wBAAeA,EAAI,KAAG,YAAKP,EAAWG,KAAI,SAAAI,GAAI,wBAAeA,EAAI,KAAG,YAAKP,EAAWG,KAAI,SAAAI,GAAI,wBAAeA,EAAI,O,OCf3NC,EAAY,CAAC,YAAa,UAAW,gBAAiB,YAAa,YAAa,YAAa,OAAQ,aAAc,UAAW,OAAQ,gBAuB5I,SAASC,EAAUC,GACjB,IAAMC,EAAQC,WAAWF,GACzB,MAAO,GAAP,OAAUC,GAAK,OAAGE,OAAOH,GAAKI,QAAQD,OAAOF,GAAQ,KAAO,KAC9D,CAmGA,SAASI,EAA+B,GAGrC,IAFD3D,EAAW,EAAXA,YACA4D,EAAM,EAANA,OAEIC,EAAa,GACjBC,OAAOC,KAAKH,GAAQI,SAAQ,SAAAC,GACP,KAAfJ,GAGgB,IAAhBD,EAAOK,KACTJ,EAAaI,EAEjB,IACA,IAAMC,EAA8BJ,OAAOC,KAAK/D,GAAamE,MAAK,SAACC,EAAGC,GACpE,OAAOrE,EAAYoE,GAAKpE,EAAYqE,EACtC,IACA,OAAOH,EAA4BI,MAAM,EAAGJ,EAA4BK,QAAQV,GAClF,CA2HA,IAAMW,EAAWzD,YAAO,MAAO,CAC7B0D,KAAM,UACN/B,KAAM,OACNgC,kBAAmB,SAACtC,EAAOuC,GACzB,IACEC,EACExC,EADFwC,WAGA1E,EAOE0E,EAPF1E,UACA+C,EAME2B,EANF3B,UACA7C,EAKEwE,EALFxE,KACA4C,EAIE4B,EAJF5B,QACAE,EAGE0B,EAHF1B,KACA2B,EAEED,EAFFC,aACA7E,EACE4E,EADF5E,YAEE8E,EAAgB,GAGhB5E,IACF4E,EA9CC,SAA8B9B,EAAShD,GAA0B,IAAb2E,EAAS,UAAH,6CAAG,CAAC,EAEnE,IAAK3B,GAAWA,GAAW,EACzB,MAAO,GAGT,GAAuB,kBAAZA,IAAyB+B,OAAOC,MAAMD,OAAO/B,KAAgC,kBAAZA,EAC1E,MAAO,CAAC2B,EAAO,cAAD,OAAelB,OAAOT,MAGtC,IAAM8B,EAAgB,GAOtB,OANA9E,EAAYgE,SAAQ,SAAAiB,GAClB,IAAMC,EAAQlC,EAAQiC,GAClBF,OAAOG,GAAS,GAClBJ,EAAcK,KAAKR,EAAO,WAAD,OAAYM,EAAU,YAAIxB,OAAOyB,KAE9D,IACOJ,CACT,CA4BsBM,CAAqBpC,EAAShD,EAAa2E,IAE7D,IAAMU,EAAoB,GAO1B,OANArF,EAAYgE,SAAQ,SAAAiB,GAClB,IAAMC,EAAQN,EAAWK,GACrBC,GACFG,EAAkBF,KAAKR,EAAO,QAAD,OAASM,EAAU,YAAIxB,OAAOyB,KAE/D,IACO,CAACP,EAAOW,KAAMpF,GAAayE,EAAOzE,UAAWE,GAAQuE,EAAOvE,KAAMyE,GAAgBF,EAAOE,cAAY,mBAAKC,GAAa,CAAgB,QAAd7B,GAAuB0B,EAAO,gBAAD,OAAiBlB,OAAOR,KAAwB,SAATC,GAAmByB,EAAO,WAAD,OAAYlB,OAAOP,MAAamC,EAC/P,GA9BetE,EA+Bd,gBACD6D,EAAU,EAAVA,WAAU,OACNW,YAAS,CACbC,UAAW,cACVZ,EAAW1E,WAAa,CACzBmC,QAAS,OACToD,SAAU,OACV9E,MAAO,QACNiE,EAAWxE,MAAQ,CACpBsF,OAAQ,GACPd,EAAWC,cAAgB,CAC5Bc,SAAU,GACW,SAApBf,EAAW1B,MAAmB,CAC/BuC,SAAUb,EAAW1B,MACrB,IArNK,SAA2B,GAG/B,IAFDnD,EAAK,EAALA,MACA6E,EAAU,EAAVA,WAEMgB,EAAkBC,YAAwB,CAC9CjC,OAAQgB,EAAW3B,UACnBjD,YAAaD,EAAMC,YAAY4D,SAEjC,OAAOkC,YAAkB,CACvB/F,SACC6F,GAAiB,SAAAG,GAClB,IAAMC,EAAS,CACbC,cAAeF,GAOjB,OALoC,IAAhCA,EAAUxB,QAAQ,YACpByB,EAAO,QAAD,OAASnD,EAAYzC,OAAU,CACnCqB,SAAU,SAGPuE,CACT,GACF,IAyBO,SAAwB,GAG5B,IAFDjG,EAAK,EAALA,MACA6E,EAAU,EAAVA,WAGE1E,EAEE0E,EAFF1E,UACAgG,EACEtB,EADFsB,WAEEvB,EAAS,CAAC,EACd,GAAIzE,GAA4B,IAAfgG,EAAkB,CACjC,IAIIC,EAJEC,EAAmBP,YAAwB,CAC/CjC,OAAQsC,EACRlG,YAAaD,EAAMC,YAAY4D,SAGD,kBAArBwC,IACTD,EAA0BxC,EAA+B,CACvD3D,YAAaD,EAAMC,YAAY4D,OAC/BA,OAAQwC,KAGZzB,EAASmB,YAAkB,CACzB/F,SACCqG,GAAkB,SAACL,EAAWd,GAC/B,IAAIoB,EACEC,EAAevG,EAAMiD,QAAQ+C,GACnC,MAAqB,QAAjBO,EACK,aACLC,UAAW,IAAF,OAAMlD,EAAUiD,KAAe,eAC/BzD,EAAYzC,MAAS,CAC5BoG,WAAYnD,EAAUiD,KAI6B,OAApDD,EAAwBF,IAAoCE,EAAsBI,SAASxB,GACvF,CAAC,EAEH,aACLsB,UAAW,GAAC,eACH1D,EAAYzC,MAAS,CAC5BoG,WAAY,GAGlB,GACF,CACA,OAAO7B,CACT,IACO,SAA2B,GAG/B,IAFD5E,EAAK,EAALA,MACA6E,EAAU,EAAVA,WAGE1E,EAEE0E,EAFF1E,UACAwG,EACE9B,EADF8B,cAEE/B,EAAS,CAAC,EACd,GAAIzE,GAA+B,IAAlBwG,EAAqB,CACpC,IAIIP,EAJEQ,EAAsBd,YAAwB,CAClDjC,OAAQ8C,EACR1G,YAAaD,EAAMC,YAAY4D,SAGE,kBAAxB+C,IACTR,EAA0BxC,EAA+B,CACvD3D,YAAaD,EAAMC,YAAY4D,OAC/BA,OAAQ+C,KAGZhC,EAASmB,YAAkB,CACzB/F,SACC4G,GAAqB,SAACZ,EAAWd,GAClC,IAAI2B,EACEN,EAAevG,EAAMiD,QAAQ+C,GACnC,MAAqB,QAAjBO,EACK,aACL3F,MAAO,eAAF,OAAiB0C,EAAUiD,GAAa,KAC7CO,WAAY,IAAF,OAAMxD,EAAUiD,KAAe,eAChCzD,EAAYzC,MAAS,CAC5B0G,YAAazD,EAAUiD,KAI6B,OAArDM,EAAyBT,IAAoCS,EAAuBH,SAASxB,GACzF,CAAC,EAEH,aACLtE,MAAO,OACPkG,WAAY,GAAC,eACJhE,EAAYzC,MAAS,CAC5B0G,YAAa,GAGnB,GACF,CACA,OAAOnC,CACT,IAnNO,SAAsB,GAG1B,IACGxB,EAHJpD,EAAK,EAALA,MACA6E,EAAU,EAAVA,WAGA,OAAO7E,EAAMC,YAAY+D,KAAKgD,QAAO,SAACC,EAAc/B,GAElD,IAAIN,EAAS,CAAC,EAId,GAHIC,EAAWK,KACb9B,EAAOyB,EAAWK,KAEf9B,EACH,OAAO6D,EAET,IAAa,IAAT7D,EAEFwB,EAAS,CACPsC,UAAW,EACXC,SAAU,EACVzF,SAAU,aAEP,GAAa,SAAT0B,EACTwB,EAAS,CACPsC,UAAW,OACXC,SAAU,EACVC,WAAY,EACZ1F,SAAU,OACVd,MAAO,YAEJ,CACL,IAAMyG,EAA0BvB,YAAwB,CACtDjC,OAAQgB,EAAWyC,QACnBrH,YAAaD,EAAMC,YAAY4D,SAE3B0D,EAAiD,kBAA5BF,EAAuCA,EAAwBnC,GAAcmC,EACxG,QAAoBG,IAAhBD,GAA6C,OAAhBA,EAC/B,OAAON,EAGT,IAAMrG,EAAQ,GAAH,OAAM6G,KAAKC,MAAMtE,EAAOmE,EAAc,KAAQ,IAAI,KACzDI,EAAO,CAAC,EACZ,GAAI9C,EAAW1E,WAAa0E,EAAWxE,MAAqC,IAA7BwE,EAAW8B,cAAqB,CAC7E,IAAMJ,EAAevG,EAAMiD,QAAQ4B,EAAW8B,eAC9C,GAAqB,QAAjBJ,EAAwB,CAC1B,IAAMpE,EAAY,QAAH,OAAWvB,EAAK,cAAM0C,EAAUiD,GAAa,KAC5DoB,EAAO,CACLT,UAAW/E,EACXT,SAAUS,EAEd,CACF,CAIAyC,EAASY,YAAS,CAChB0B,UAAWtG,EACXuG,SAAU,EACVzF,SAAUd,GACT+G,EACL,CAQA,OAL6C,IAAzC3H,EAAMC,YAAY4D,OAAOqB,GAC3BnB,OAAO6D,OAAOX,EAAcrC,GAE5BqC,EAAajH,EAAMC,YAAY4H,GAAG3C,IAAeN,EAE5CqC,CACT,GAAG,CAAC,EACN,IA2OA,IAAMa,EAAoB,SAAAjD,GACxB,IACEkD,EAQElD,EARFkD,QACA5H,EAOE0E,EAPF1E,UACA+C,EAME2B,EANF3B,UACA7C,EAKEwE,EALFxE,KACA4C,EAIE4B,EAJF5B,QACAE,EAGE0B,EAHF1B,KACA2B,EAEED,EAFFC,aACA7E,EACE4E,EADF5E,YAEE+H,EAAiB,GAGjB7H,IACF6H,EAnCG,SAA+B/E,EAAShD,GAE7C,IAAKgD,GAAWA,GAAW,EACzB,MAAO,GAGT,GAAuB,kBAAZA,IAAyB+B,OAAOC,MAAMD,OAAO/B,KAAgC,kBAAZA,EAC1E,MAAO,CAAC,cAAD,OAAeS,OAAOT,KAG/B,IAAM8E,EAAU,GAQhB,OAPA9H,EAAYgE,SAAQ,SAAAiB,GAClB,IAAMC,EAAQlC,EAAQiC,GACtB,GAAIF,OAAOG,GAAS,EAAG,CACrB,IAAM8C,EAAY,WAAH,OAAc/C,EAAU,YAAIxB,OAAOyB,IAClD4C,EAAQ3C,KAAK6C,EACf,CACF,IACOF,CACT,CAgBqBG,CAAsBjF,EAAShD,IAElD,IAAMkI,EAAqB,GAC3BlI,EAAYgE,SAAQ,SAAAiB,GAClB,IAAMC,EAAQN,EAAWK,GACrBC,GACFgD,EAAmB/C,KAAK,QAAD,OAASF,EAAU,YAAIxB,OAAOyB,IAEzD,IACA,IAAMiD,EAAQ,CACZ7C,KAAM,CAAC,OAAQpF,GAAa,YAAaE,GAAQ,OAAQyE,GAAgB,gBAAc,mBAAKkD,GAAc,CAAgB,QAAd9E,GAAuB,gBAAJ,OAAoBQ,OAAOR,IAAuB,SAATC,GAAmB,WAAJ,OAAeO,OAAOP,KAAYgF,IAE3N,OAAOE,YAAeD,EAAO1F,EAAqBqF,EACpD,EACMO,EAAoB7F,cAAiB,SAAc8F,EAASC,GAChE,IAAMC,EAAaC,YAAc,CAC/BrG,MAAOkG,EACP7D,KAAM,YAGNzE,EACE0I,cADF1I,YAEIoC,EAAQuG,YAAaH,GAEvBR,EAWE5F,EAXF4F,UACSY,EAUPxG,EAVFiF,QACewB,EASbzG,EATFsE,cAAa,EASXtE,EARF0G,iBAAS,IAAG,QAAK,IAQf1G,EAPFlC,iBAAS,IAAG,GAAK,IAOfkC,EANFa,iBAAS,IAAG,QAAK,IAMfb,EALFhC,YAAI,IAAG,GAAK,EACA2I,EAIV3G,EAJF8D,WAAU,EAIR9D,EAHFY,eAAO,IAAG,IAAC,IAGTZ,EAFFc,YAAI,IAAG,SAAM,IAEXd,EADFyC,oBAAY,IAAG,GAAK,EAEtBmE,EAAQC,YAA8B7G,EAAOgB,GACzC8C,EAAa6C,GAAkB/F,EAC/B0D,EAAgBmC,GAAqB7F,EACrCkG,EAAiB1G,aAAiBD,GAGlC8E,EAAUnH,EAAY0I,GAAe,GAAKM,EAC1CC,EAAoB,CAAC,EACrBC,EAAgB7D,YAAS,CAAC,EAAGyD,GACnChJ,EAAY+D,KAAKC,SAAQ,SAAAiB,GACE,MAArB+D,EAAM/D,KACRkE,EAAkBlE,GAAc+D,EAAM/D,UAC/BmE,EAAcnE,GAEzB,IACA,IAAML,EAAaW,YAAS,CAAC,EAAGnD,EAAO,CACrCiF,UACAnH,YACA+C,YACA7C,OACA8F,aACAQ,gBACAxD,OACA2B,eACA7B,WACCmG,EAAmB,CACpBnJ,YAAaA,EAAY+D,OAErB+D,EAAUD,EAAkBjD,GAClC,OAAoByE,cAAK9G,EAAY+G,SAAU,CAC7CpE,MAAOmC,EACP1H,SAAuB0J,cAAK7E,EAAUe,YAAS,CAC7CX,WAAYA,EACZoD,UAAWuB,YAAKzB,EAAQxC,KAAM0C,GAC9BwB,GAAIV,EACJP,IAAKA,GACJa,KAEP,IA+Ief,K,mCCrjBf,aACMtH,EAAS0I,cACA1I,K","file":"static/js/85.11ea5ed9.chunk.js","sourcesContent":["import { Box, Grid, useMediaQuery } from \"@mui/material\";\r\nimport FlexRowAlign from \"components/flexbox/FlexRowAlign\";\r\n\r\n// --------------------------------------------------------------\r\nconst RootLayout = ({\r\n  children,\r\n  imgLink\r\n}) => {\r\n  const downMd = useMediaQuery(theme => theme.breakpoints.down(\"md\"));\r\n  return <Grid container height=\"100%\">\r\n      <Grid item md={6} xs={12} order={downMd ? 2 : 1}>\r\n        <FlexRowAlign sx={{\r\n        padding: 4,\r\n        height: \"100%\",\r\n        backgroundColor: \"grey.300\"\r\n      }}>\r\n          <Box>\r\n            <img width=\"100%\" alt=\"Forget Password\" src={imgLink} />\r\n          </Box>\r\n        </FlexRowAlign>\r\n      </Grid>\r\n\r\n      <Grid item md={6} xs={12} order={downMd ? 1 : 2}>\r\n        {children}\r\n      </Grid>\r\n    </Grid>;\r\n};\r\n\r\nexport default RootLayout;","import { Box, Button } from \"@mui/material\";\r\nimport { styled } from \"@mui/system\";\r\nimport RootLayout from \"page-sections/authentication/RootLayout\";\r\nimport FlexBox from \"components/flexbox/FlexBox\";\r\nimport FlexRowAlign from \"components/flexbox/FlexRowAlign\";\r\nimport { H1, Paragraph, Small } from \"components/Typography\";\r\n// styled components\r\nconst StyledInput = styled(\"input\")(({\r\n  theme\r\n}) => ({\r\n  width: 45,\r\n  height: 45,\r\n  outline: 0,\r\n  fontSize: 18,\r\n  fontWeight: 600,\r\n  borderRadius: \"4px\",\r\n  textAlign: \"center\",\r\n  backgroundColor: \"transparent\",\r\n  border: `1px solid ${theme.palette.grey[600]}`\r\n}));\r\n\r\nconst TwoStepVerification = () => {\r\n  return <RootLayout imgLink=\"/static/illustration/two-step-verify.svg\">\r\n      <FlexRowAlign height=\"100%\">\r\n        <Box textAlign=\"center\" maxWidth={420} width=\"100%\" padding={4}>\r\n          <img src=\"/static/logo/logo-circle.svg\" width={80} alt=\"Logo\" />\r\n          <H1 fontWeight={700} mt={2}>\r\n            Two Step Verification\r\n          </H1>\r\n          <Paragraph color=\"text.disabled\" fontWeight={500}>\r\n            Enter the verficitaion code we sent to your mail\r\n          </Paragraph>\r\n\r\n          <form>\r\n            <Small mt={5}>Type your *6 digit security code:</Small>\r\n\r\n            <FlexBox gap={1} mt={1} mb={4} justifyContent=\"center\">\r\n              <StyledInput type=\"text\" maxLength={1} />\r\n              <StyledInput type=\"text\" maxLength={1} />\r\n              <StyledInput type=\"text\" maxLength={1} />\r\n              <StyledInput type=\"text\" maxLength={1} />\r\n              <StyledInput type=\"text\" maxLength={1} />\r\n              <StyledInput type=\"text\" maxLength={1} />\r\n            </FlexBox>\r\n\r\n            <Button variant=\"contained\" fullWidth>\r\n              Submit\r\n            </Button>\r\n          </form>\r\n        </Box>\r\n      </FlexRowAlign>\r\n    </RootLayout>;\r\n};\r\n\r\nexport default TwoStepVerification;","import { Box } from \"@mui/material\";\r\n\r\nconst FlexRowAlign = ({\r\n  children,\r\n  ...props\r\n}) => <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" {...props}>\r\n    {children}\r\n  </Box>;\r\n\r\nexport default FlexRowAlign;","import * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst GridContext = /*#__PURE__*/React.createContext();\nif (process.env.NODE_ENV !== 'production') {\n  GridContext.displayName = 'GridContext';\n}\nexport default GridContext;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getGridUtilityClass(slot) {\n  return generateUtilityClass('MuiGrid', slot);\n}\nconst SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];\nconst WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];\nconst GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth',\n// spacings\n...SPACINGS.map(spacing => `spacing-xs-${spacing}`),\n// direction values\n...DIRECTIONS.map(direction => `direction-xs-${direction}`),\n// wrap values\n...WRAPS.map(wrap => `wrap-xs-${wrap}`),\n// grid sizes for all breakpoints\n...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);\nexport default gridClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"rowSpacing\", \"spacing\", \"wrap\", \"zeroMinWidth\"];\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useTheme from '../styles/useTheme';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\nexport function generateGrid({\n  theme,\n  ownerState\n}) {\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n    if (!size) {\n      return globalStyles;\n    }\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      }\n      // Keep 7 significant numbers.\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      }\n\n      // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n      styles = _extends({\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width\n      }, more);\n    }\n\n    // No need for a media query for the first size.\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n    return output;\n  });\n}\n\n/**\n * Extracts zero value breakpoint keys before a non-zero value breakpoint key.\n * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]\n * @returns [xs, sm]\n */\nfunction extractZeroValueBreakpointKeys({\n  breakpoints,\n  values\n}) {\n  let nonZeroKey = '';\n  Object.keys(values).forEach(key => {\n    if (nonZeroKey !== '') {\n      return;\n    }\n    if (values[key] !== 0) {\n      nonZeroKey = key;\n    }\n  });\n  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {\n    return breakpoints[a] - breakpoints[b];\n  });\n  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));\n}\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof rowSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: rowSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, (propValue, breakpoint) => {\n      var _zeroValueBreakpointK;\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n      if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        marginTop: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingTop: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof columnSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: columnSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, (propValue, breakpoint) => {\n      var _zeroValueBreakpointK2;\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n      if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        width: '100%',\n        marginLeft: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingLeft: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function resolveSpacingStyles(spacing, breakpoints, styles = {}) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`]];\n  }\n  // in case of object `spacing`\n  const spacingStyles = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);\n    }\n  });\n  return spacingStyles;\n}\n\n// Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      container,\n      direction,\n      item,\n      spacing,\n      wrap,\n      zeroMinWidth,\n      breakpoints\n    } = ownerState;\n    let spacingStyles = [];\n\n    // in case of grid item\n    if (container) {\n      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);\n    }\n    const breakpointsStyles = [];\n    breakpoints.forEach(breakpoint => {\n      const value = ownerState[breakpoint];\n      if (value) {\n        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);\n      }\n    });\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];\n  }\n})(({\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box'\n}, ownerState.container && {\n  display: 'flex',\n  flexWrap: 'wrap',\n  width: '100%'\n}, ownerState.item && {\n  margin: 0 // For instance, it's useful when used with a `figure` element.\n}, ownerState.zeroMinWidth && {\n  minWidth: 0\n}, ownerState.wrap !== 'wrap' && {\n  flexWrap: ownerState.wrap\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\nexport function resolveSpacingClasses(spacing, breakpoints) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [`spacing-xs-${String(spacing)}`];\n  }\n  // in case of object `spacing`\n  const classes = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      const className = `spacing-${breakpoint}-${String(value)}`;\n      classes.push(className);\n    }\n  });\n  return classes;\n}\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    breakpoints\n  } = ownerState;\n  let spacingClasses = [];\n\n  // in case of grid item\n  if (container) {\n    spacingClasses = resolveSpacingClasses(spacing, breakpoints);\n  }\n  const breakpointsClasses = [];\n  breakpoints.forEach(breakpoint => {\n    const value = ownerState[breakpoint];\n    if (value) {\n      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);\n    }\n  });\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const props = extendSxProp(themeProps);\n  const {\n      className,\n      columns: columnsProp,\n      columnSpacing: columnSpacingProp,\n      component = 'div',\n      container = false,\n      direction = 'row',\n      item = false,\n      rowSpacing: rowSpacingProp,\n      spacing = 0,\n      wrap = 'wrap',\n      zeroMinWidth = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext);\n\n  // columns set with default breakpoint unit of 12\n  const columns = container ? columnsProp || 12 : columnsContext;\n  const breakpointsValues = {};\n  const otherFiltered = _extends({}, other);\n  breakpoints.keys.forEach(breakpoint => {\n    if (other[breakpoint] != null) {\n      breakpointsValues[breakpoint] = other[breakpoint];\n      delete otherFiltered[breakpoint];\n    }\n  });\n  const ownerState = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    zeroMinWidth,\n    spacing\n  }, breakpointsValues, {\n    breakpoints: breakpoints.keys\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: /*#__PURE__*/_jsx(GridRoot, _extends({\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref\n    }, otherFiltered))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid);\n  // eslint-disable-next-line no-useless-concat\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\nexport default Grid;","import createStyled from './createStyled';\nconst styled = createStyled();\nexport default styled;"],"sourceRoot":""}