{"version":3,"sources":["pages/authentication/forget-password.jsx","components/input-fields/AppTextField.jsx","components/flexbox/FlexRowAlign.jsx","../node_modules/@mui/material/Grid/GridContext.js","../node_modules/@mui/material/Grid/gridClasses.js","../node_modules/@mui/material/Grid/Grid.js"],"names":["ForgetPassword","useState","input","setInput","percentage1","setPercentage1","percentage2","setPercentage2","subtract","setSubtract","result","setResult","sx","display","alignItems","justifyContent","height","size","type","value","onChange","e","target","placeholder","variant","style","backgroundColor","color","onClick","intermediate1","StyledTextField","styled","TextField","theme","fontWeight","borderRadius","borderColor","palette","action","disabled","hover","width","text","AppTextField","props","FlexRowAlign","children","GridContext","React","getGridUtilityClass","slot","generateUtilityClass","GRID_SIZES","gridClasses","generateUtilityClasses","map","spacing","direction","wrap","_excluded","getOffset","val","parse","parseFloat","String","replace","extractZeroValueBreakpointKeys","breakpoints","values","nonZeroKey","Object","keys","forEach","key","sortedBreakpointKeysByValue","sort","a","b","slice","indexOf","GridRoot","name","overridesResolver","styles","ownerState","container","item","zeroMinWidth","spacingStyles","Number","isNaN","breakpoint","push","resolveSpacingStyles","breakpointsStyles","root","_extends","boxSizing","flexWrap","margin","minWidth","directionValues","resolveBreakpointValues","handleBreakpoints","propValue","output","flexDirection","maxWidth","rowSpacing","zeroValueBreakpointKeys","rowSpacingValues","_zeroValueBreakpointK","themeSpacing","marginTop","paddingTop","includes","columnSpacing","columnSpacingValues","_zeroValueBreakpointK2","marginLeft","paddingLeft","reduce","globalStyles","flexBasis","flexGrow","flexShrink","columnsBreakpointValues","columns","columnValue","undefined","Math","round","more","fullWidth","assign","up","useUtilityClasses","classes","spacingClasses","className","resolveSpacingClasses","breakpointsClasses","slots","composeClasses","Grid","inProps","ref","themeProps","useThemeProps","useTheme","extendSxProp","columnsProp","columnSpacingProp","component","rowSpacingProp","other","_objectWithoutPropertiesLoose","columnsContext","breakpointsValues","otherFiltered","_jsx","Provider","clsx","as"],"mappings":"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","file":"static/js/92.4f49a0c0.chunk.js","sourcesContent":["import { Box, Button, Stack, TextField, Grid  } from \"@mui/material\";\r\nimport FlexBox from \"components/flexbox/FlexBox\";\r\nimport FlexRowAlign from \"components/flexbox/FlexRowAlign\";\r\nimport AppTextField from \"components/input-fields/AppTextField\";\r\nimport { H1, Paragraph } from \"components/Typography\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst ForgetPassword = () => {\r\n  const [input, setInput] = useState(0);\r\n  const [percentage1, setPercentage1] = useState(0);\r\n  const [percentage2, setPercentage2] = useState(0);\r\n  const [percentage3, setPercentage3] = useState(0);\r\n  const [subtract, setSubtract] = useState(0);\r\n  const [result, setResult] = useState(0);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handlePercentage1Change = (e) => {\r\n    setPercentage1(e.target.value);\r\n  };\r\n\r\n  const handlePercentage2Change = (e) => {\r\n    setPercentage2(e.target.value);\r\n  };\r\n\r\n  const handlePercentage3Change = (e) => {\r\n    setPercentage3(e.target.value);\r\n  };\r\n\r\n  const handleSubtractChange = (e) => {\r\n    setSubtract(e.target.value);\r\n  };\r\n\r\n  const calculate = () => {\r\n      let result1 = input - (input * percentage1) / 100;\r\n      let intermediate1 = input - result1;\r\n      let result2 = intermediate1 - (intermediate1 * percentage2) / 100;\r\n      let intermediate2 = intermediate1 - result2;\r\n    // let result3 = input - (input * percentage3) / 100;\r\n    // let intermediate3 = input - result3;\r\n\r\n    setResult(input - intermediate1 - intermediate2 - subtract);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <Grid>\r\n        <h1>Percentage Calculator</h1>\r\n        <p>Selling Price:</p>\r\n        <TextField size=\"small\" type=\"number\" value={input} onChange={handleInputChange} />\r\n        <p>Referral Fee:</p>\r\n        <TextField\r\n          size=\"small\"\r\n          type=\"number\"\r\n          placeholder=\"Percentage 1\"\r\n          value={percentage1}\r\n          onChange={handlePercentage1Change}\r\n        />\r\n        <p>GST on Referral Fee:</p>\r\n        <TextField\r\n          size=\"small\"\r\n          type=\"number\"\r\n          placeholder=\"Percentage 2\"\r\n          value={percentage2}\r\n          onChange={handlePercentage2Change}\r\n        />\r\n        {/* <p>GST on Items:</p>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Percentage 3\"\r\n          value={percentage3}\r\n          onChange={handlePercentage3Change}\r\n        /> */}\r\n        <p>Shipping cost:</p>\r\n        <TextField\r\n          size=\"small\"\r\n          type=\"number\"\r\n          placeholder=\"Subtract\"\r\n          value={subtract}\r\n          onChange={handleSubtractChange}\r\n        />\r\n        <p></p>\r\n        <Button\r\n          variant=\"contained\"\r\n          style={{ backgroundColor: \"#8d1f1f\", color: \"#ffffff\" }}\r\n          onClick={calculate}\r\n        >\r\n          Calculate\r\n        </Button>\r\n        <p>Result: {result}</p>\r\n      </Grid>\r\n      </Box>\r\n  );\r\n};\r\n\r\nexport default ForgetPassword;\r\n","import { styled, TextField } from \"@mui/material\";\r\nimport React from \"react\";\r\nconst StyledTextField = styled(TextField)(({\r\n  theme\r\n}) => ({\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontWeight: 500,\r\n    // color: theme.palette.text.primary,\r\n    height:\"0.em\",\r\n    \r\n  },\r\n  \"& .MuiOutlinedInput-notchedOutline\": {\r\n    borderRadius: \"8px\",\r\n    borderColor: theme.palette.action.disabled\r\n  },\r\n  \"& .MuiOutlinedInput-root.Mui-disabled .MuiOutlinedInput-notchedOutline\": {\r\n    borderColor: theme.palette.action.hover,\r\n    width:\"80%\"\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    fontWeight: 500,\r\n    color: theme.palette.text.disabled\r\n  },\r\n  \"& .MuiInputLabel-root.Mui-focused\": {\r\n    fontWeight: 600\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: theme.palette.text.disabled\r\n  }\r\n}));\r\n\r\nconst AppTextField = props => {\r\n  return <StyledTextField {...props} />;\r\n};\r\n\r\nexport default AppTextField;","import { Box } from \"@mui/material\";\r\n\r\nconst FlexRowAlign = ({\r\n  children,\r\n  ...props\r\n}) => <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" {...props}>\r\n    {children}\r\n  </Box>;\r\n\r\nexport default FlexRowAlign;","import * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst GridContext = /*#__PURE__*/React.createContext();\nif (process.env.NODE_ENV !== 'production') {\n  GridContext.displayName = 'GridContext';\n}\nexport default GridContext;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getGridUtilityClass(slot) {\n  return generateUtilityClass('MuiGrid', slot);\n}\nconst SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];\nconst WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];\nconst GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth',\n// spacings\n...SPACINGS.map(spacing => `spacing-xs-${spacing}`),\n// direction values\n...DIRECTIONS.map(direction => `direction-xs-${direction}`),\n// wrap values\n...WRAPS.map(wrap => `wrap-xs-${wrap}`),\n// grid sizes for all breakpoints\n...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);\nexport default gridClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"rowSpacing\", \"spacing\", \"wrap\", \"zeroMinWidth\"];\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useTheme from '../styles/useTheme';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\nexport function generateGrid({\n  theme,\n  ownerState\n}) {\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n    if (!size) {\n      return globalStyles;\n    }\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      }\n      // Keep 7 significant numbers.\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      }\n\n      // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n      styles = _extends({\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width\n      }, more);\n    }\n\n    // No need for a media query for the first size.\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n    return output;\n  });\n}\n\n/**\n * Extracts zero value breakpoint keys before a non-zero value breakpoint key.\n * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]\n * @returns [xs, sm]\n */\nfunction extractZeroValueBreakpointKeys({\n  breakpoints,\n  values\n}) {\n  let nonZeroKey = '';\n  Object.keys(values).forEach(key => {\n    if (nonZeroKey !== '') {\n      return;\n    }\n    if (values[key] !== 0) {\n      nonZeroKey = key;\n    }\n  });\n  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {\n    return breakpoints[a] - breakpoints[b];\n  });\n  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));\n}\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof rowSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: rowSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, (propValue, breakpoint) => {\n      var _zeroValueBreakpointK;\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n      if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        marginTop: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingTop: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof columnSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: columnSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, (propValue, breakpoint) => {\n      var _zeroValueBreakpointK2;\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n      if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        width: '100%',\n        marginLeft: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingLeft: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function resolveSpacingStyles(spacing, breakpoints, styles = {}) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`]];\n  }\n  // in case of object `spacing`\n  const spacingStyles = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);\n    }\n  });\n  return spacingStyles;\n}\n\n// Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      container,\n      direction,\n      item,\n      spacing,\n      wrap,\n      zeroMinWidth,\n      breakpoints\n    } = ownerState;\n    let spacingStyles = [];\n\n    // in case of grid item\n    if (container) {\n      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);\n    }\n    const breakpointsStyles = [];\n    breakpoints.forEach(breakpoint => {\n      const value = ownerState[breakpoint];\n      if (value) {\n        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);\n      }\n    });\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];\n  }\n})(({\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box'\n}, ownerState.container && {\n  display: 'flex',\n  flexWrap: 'wrap',\n  width: '100%'\n}, ownerState.item && {\n  margin: 0 // For instance, it's useful when used with a `figure` element.\n}, ownerState.zeroMinWidth && {\n  minWidth: 0\n}, ownerState.wrap !== 'wrap' && {\n  flexWrap: ownerState.wrap\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\nexport function resolveSpacingClasses(spacing, breakpoints) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [`spacing-xs-${String(spacing)}`];\n  }\n  // in case of object `spacing`\n  const classes = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      const className = `spacing-${breakpoint}-${String(value)}`;\n      classes.push(className);\n    }\n  });\n  return classes;\n}\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    breakpoints\n  } = ownerState;\n  let spacingClasses = [];\n\n  // in case of grid item\n  if (container) {\n    spacingClasses = resolveSpacingClasses(spacing, breakpoints);\n  }\n  const breakpointsClasses = [];\n  breakpoints.forEach(breakpoint => {\n    const value = ownerState[breakpoint];\n    if (value) {\n      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);\n    }\n  });\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const props = extendSxProp(themeProps);\n  const {\n      className,\n      columns: columnsProp,\n      columnSpacing: columnSpacingProp,\n      component = 'div',\n      container = false,\n      direction = 'row',\n      item = false,\n      rowSpacing: rowSpacingProp,\n      spacing = 0,\n      wrap = 'wrap',\n      zeroMinWidth = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext);\n\n  // columns set with default breakpoint unit of 12\n  const columns = container ? columnsProp || 12 : columnsContext;\n  const breakpointsValues = {};\n  const otherFiltered = _extends({}, other);\n  breakpoints.keys.forEach(breakpoint => {\n    if (other[breakpoint] != null) {\n      breakpointsValues[breakpoint] = other[breakpoint];\n      delete otherFiltered[breakpoint];\n    }\n  });\n  const ownerState = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    zeroMinWidth,\n    spacing\n  }, breakpointsValues, {\n    breakpoints: breakpoints.keys\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: /*#__PURE__*/_jsx(GridRoot, _extends({\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref\n    }, otherFiltered))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid);\n  // eslint-disable-next-line no-useless-concat\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\nexport default Grid;"],"sourceRoot":""}