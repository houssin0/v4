{"ast":null,"code":"var _jsxFileName = \"/workspaces/v4/client/src/contexts/settingsContext.jsx\",\n  _s = $RefreshSig$();\nimport useLocalStorage from \"hooks/useLocalStorage\";\nimport { createContext } from \"react\";\nimport { THEMES } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialSettings = {\n  activeLayout: \"layout3\",\n  direction: \"ltr\",\n  theme: THEMES.LIGHT,\n  responsiveFontSizes: true\n};\nexport const SettingsContext = /*#__PURE__*/createContext({\n  settings: initialSettings,\n  saveSettings: arg => {}\n}); // component props type\n\nconst SettingsProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    data: settings,\n    storeData: setStoreSettings\n  } = useLocalStorage(\"settings\", initialSettings);\n  const saveSettings = updateSettings => {\n    setStoreSettings(updateSettings);\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      settings,\n      saveSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n};\n_s(SettingsProvider, \"FUihDbO3ksx6w9ah9OQyQvl38Io=\", false, function () {\n  return [useLocalStorage];\n});\n_c = SettingsProvider;\nexport default SettingsProvider;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["useLocalStorage","createContext","THEMES","initialSettings","activeLayout","direction","theme","LIGHT","responsiveFontSizes","SettingsContext","settings","saveSettings","arg","SettingsProvider","children","data","storeData","setStoreSettings","updateSettings"],"sources":["/workspaces/v4/client/src/contexts/settingsContext.jsx"],"sourcesContent":["import useLocalStorage from \"hooks/useLocalStorage\";\nimport { createContext } from \"react\";\nimport { THEMES } from \"../constants\";\nconst initialSettings = {\n  activeLayout: \"layout3\",\n  direction: \"ltr\",\n  theme: THEMES.LIGHT,\n  responsiveFontSizes: true\n};\nexport const SettingsContext = createContext({\n  settings: initialSettings,\n  saveSettings: arg => {}\n}); // component props type\n\nconst SettingsProvider = ({\n  children\n}) => {\n  const {\n    data: settings,\n    storeData: setStoreSettings\n  } = useLocalStorage(\"settings\", initialSettings);\n\n  const saveSettings = updateSettings => {\n    setStoreSettings(updateSettings);\n  };\n\n  return <SettingsContext.Provider value={{\n    settings,\n    saveSettings\n  }}>\n      {children}\n    </SettingsContext.Provider>;\n};\n\nexport default SettingsProvider;"],"mappings":";;AAAA,OAAOA,eAAe,MAAM,uBAAuB;AACnD,SAASC,aAAa,QAAQ,OAAO;AACrC,SAASC,MAAM,QAAQ,cAAc;AAAC;AACtC,MAAMC,eAAe,GAAG;EACtBC,YAAY,EAAE,SAAS;EACvBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAEJ,MAAM,CAACK,KAAK;EACnBC,mBAAmB,EAAE;AACvB,CAAC;AACD,OAAO,MAAMC,eAAe,gBAAGR,aAAa,CAAC;EAC3CS,QAAQ,EAAEP,eAAe;EACzBQ,YAAY,EAAEC,GAAG,IAAI,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC;;AAEJ,MAAMC,gBAAgB,GAAG,QAEnB;EAAA;EAAA,IAFoB;IACxBC;EACF,CAAC;EACC,MAAM;IACJC,IAAI,EAAEL,QAAQ;IACdM,SAAS,EAAEC;EACb,CAAC,GAAGjB,eAAe,CAAC,UAAU,EAAEG,eAAe,CAAC;EAEhD,MAAMQ,YAAY,GAAGO,cAAc,IAAI;IACrCD,gBAAgB,CAACC,cAAc,CAAC;EAClC,CAAC;EAED,oBAAO,QAAC,eAAe,CAAC,QAAQ;IAAC,KAAK,EAAE;MACtCR,QAAQ;MACRC;IACF,CAAE;IAAA,UACGG;EAAQ;IAAA;IAAA;IAAA;EAAA,QACgB;AAC/B,CAAC;AAAC,GAlBID,gBAAgB;EAAA,QAMhBb,eAAe;AAAA;AAAA,KANfa,gBAAgB;AAoBtB,eAAeA,gBAAgB;AAAC;AAAA"},"metadata":{},"sourceType":"module"}