{"ast":null,"code":"var _jsxFileName = \"/workspaces/v4/src/pages/authentication/new-password.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Box, Button, Stack, Alert } from \"@mui/material\";\nimport AppCheckBox from \"components/AppCheckBox\";\nimport RootLayout from \"page-sections/authentication/RootLayout\";\nimport FlexBox from \"components/flexbox/FlexBox\";\nimport FlexRowAlign from \"components/flexbox/FlexRowAlign\";\nimport { H1, Paragraph, Small } from \"components/Typography\";\nimport AppTextField from \"components/input-fields/AppTextField\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { hashPassword } from './hashPassword';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewPassword = props => {\n  _s();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [agreed, setAgreed] = useState(false);\n  const {\n    state\n  } = useLocation();\n  const navigate = useNavigate();\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log(state.sellerId);\n    const {\n      hash,\n      salt\n    } = await hashPassword(password);\n    // console.log(state.sellerId);\n    // console.log(hash);\n    // console.log(salt);\n    // Code to handle submit action goes here\n    axios.post('http://192.168.29.120:5000/api/v1/tkseller/seller/sellersetpwd', {\n      \"sellerId\": state.sellerId,\n      \"passwordSalt\": salt,\n      \"passwordHash\": hash,\n      \"loginAttempt\": 0\n    }).then(response => {\n      if (response.status === 200) {\n        navigate(\"/dashboard\");\n      }\n    });\n  };\n  const [message, setMessage] = useState(null);\n  const validatePassword = password => {\n    const passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,14}$/;\n    return passwordPattern.test(password);\n  };\n  return /*#__PURE__*/_jsxDEV(RootLayout, {\n    imgLink: \"/static/illustration/new-password.svg\",\n    children: /*#__PURE__*/_jsxDEV(FlexRowAlign, {\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        textAlign: \"center\",\n        maxWidth: 550,\n        width: \"100%\",\n        padding: 4,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/static/logo/kartlogo.png\",\n          width: 80,\n          alt: \"Logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(H1, {\n          fontWeight: 700,\n          mt: 2,\n          children: \"Setup New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n          color: \"text.disabled\",\n          fontWeight: 500,\n          children: [\"Already have reset you password?\", \" \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/login\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            gap: 3,\n            mt: 5,\n            children: [/*#__PURE__*/_jsxDEV(AppTextField, {\n              fullWidth: true,\n              label: \"Password\",\n              type: \"password\",\n              value: password,\n              autoComplete: \"off\",\n              onChange: event => {\n                const password_1 = event.target.value;\n                setPassword(password_1);\n                if (!validatePassword(event.target.value)) {\n                  setMessage( /*#__PURE__*/_jsxDEV(Alert, {\n                    severity: \"info\",\n                    children: \"The password should contain atleast one number and one special character, should have atleast one upper case and lower case, and have a length of 8 to 14 characters!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 32\n                  }, this));\n                } else {\n                  setMessage(null);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AppTextField, {\n              fullWidth: true,\n              label: \"Confirm Password\",\n              type: \"password\",\n              value: confirmPassword,\n              autoComplete: \"off\",\n              onChange: event => {\n                const confirmPassword_1 = event.target.value;\n                setConfirmPassword(confirmPassword_1);\n                if (password !== event.target.value) {\n                  setMessage( /*#__PURE__*/_jsxDEV(Alert, {\n                    severity: \"error\",\n                    children: \"Please make sure your passwords match!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 32\n                  }, this));\n                } else {\n                  setMessage(null);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), message, /*#__PURE__*/_jsxDEV(FlexBox, {\n              alignItems: \"center\",\n              gap: 1,\n              children: [/*#__PURE__*/_jsxDEV(AppCheckBox, {\n                defaultChecked: agreed,\n                onChange: event => {\n                  const agreed_0 = event.target.checked;\n                  setAgreed(agreed_0);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Small, {\n                fontSize: 12,\n                children: [\"I agree to the\", \" \", /*#__PURE__*/_jsxDEV(Link, {\n                  to: \"#\",\n                  children: \"terms and conditions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              fullWidth: true,\n              type: \"submit\",\n              disabled: password !== confirmPassword || !agreed || !validatePassword(password),\n              onClick: handleSubmit,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(NewPassword, \"EDYlSzl+9PlOVeiEIkyK8pxvnao=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = NewPassword;\nexport default NewPassword;\nvar _c;\n$RefreshReg$(_c, \"NewPassword\");","map":{"version":3,"names":["React","useState","Box","Button","Stack","Alert","AppCheckBox","RootLayout","FlexBox","FlexRowAlign","H1","Paragraph","Small","AppTextField","Link","useLocation","useNavigate","hashPassword","axios","NewPassword","props","password","setPassword","confirmPassword","setConfirmPassword","agreed","setAgreed","state","navigate","handleSubmit","event","preventDefault","console","log","sellerId","hash","salt","post","then","response","status","message","setMessage","validatePassword","passwordPattern","test","password_1","target","value","confirmPassword_1","agreed_0","checked"],"sources":["/workspaces/v4/src/pages/authentication/new-password.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Box, Button, Stack, Alert } from \"@mui/material\";\nimport AppCheckBox from \"components/AppCheckBox\";\nimport RootLayout from \"page-sections/authentication/RootLayout\";\nimport FlexBox from \"components/flexbox/FlexBox\";\nimport FlexRowAlign from \"components/flexbox/FlexRowAlign\";\nimport { H1, Paragraph, Small } from \"components/Typography\";\nimport AppTextField from \"components/input-fields/AppTextField\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { hashPassword } from './hashPassword';\nimport axios from \"axios\";\n\n\nconst NewPassword = (props) => {\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [agreed, setAgreed] = useState(false);\n\n  const { state } = useLocation();\n\n  const navigate = useNavigate();\n\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    console.log(state.sellerId);\n    const { hash, salt } = await hashPassword(password);\n    // console.log(state.sellerId);\n    // console.log(hash);\n    // console.log(salt);\n    // Code to handle submit action goes here\n    axios.post('http://192.168.29.120:5000/api/v1/tkseller/seller/sellersetpwd',\n      {\n        \"sellerId\": state.sellerId,\n        \"passwordSalt\": salt, \n        \"passwordHash\": hash, \n        \"loginAttempt\": 0\n      }\n    ).then((response) => {\n      if (response.status === 200) {\n        navigate(\"/dashboard\");\n      }\n    })\n  };\n\n  const [message, setMessage] = useState(null);\n\n  const validatePassword = (password) => {\n    const passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,14}$/;\n    return passwordPattern.test(password);\n  };\n\n  return (\n    <RootLayout imgLink=\"/static/illustration/new-password.svg\">\n      <FlexRowAlign height=\"100%\">\n        <Box textAlign=\"center\" maxWidth={550} width=\"100%\" padding={4}>\n          <img src=\"/static/logo/kartlogo.png\" width={80} alt=\"Logo\" />\n          <H1 fontWeight={700} mt={2}>\n            Setup New Password\n          </H1>\n          <Paragraph color=\"text.disabled\" fontWeight={500}>\n            Already have reset you password?{\" \"}\n            <Link to=\"/login\">Sign In</Link>\n          </Paragraph>\n\n          <form onSubmit={handleSubmit}>\n            <Stack gap={3} mt={5}>\n              <AppTextField\n                fullWidth\n                label=\"Password\"\n                type=\"password\"\n                value={password}\n                autoComplete=\"off\"\n                onChange={event => {\n                  const password_1 = event.target.value;\n                  setPassword(password_1);\n                  if (!validatePassword(event.target.value)) {\n                    setMessage(<Alert severity=\"info\">The password should contain atleast one number and one special character, should have atleast one upper case and lower case, and have a length of 8 to 14 characters!</Alert>);\n                  } else {\n                    setMessage(null);\n                  }\n                }}\n              />\n              <AppTextField\n                fullWidth\n                label=\"Confirm Password\"\n                type=\"password\"\n                value={confirmPassword}\n                autoComplete=\"off\"\n                onChange={event => {\n                  const confirmPassword_1 = event.target.value;\n                  setConfirmPassword(confirmPassword_1);\n                  if (password !== event.target.value) {\n                    setMessage(<Alert severity=\"error\">Please make sure your passwords match!</Alert>);\n                  } else {\n                    setMessage(null);\n                  }\n                }}\n              />\n              {message}\n              <FlexBox alignItems=\"center\" gap={1}>\n                <AppCheckBox\n                  defaultChecked={agreed}\n                  onChange={(event) => {\n                    const agreed_0 = event.target.checked;\n                    setAgreed(agreed_0)\n                  }\n                  }\n                />\n                <Small fontSize={12}>\n                  I agree to the{\" \"}\n                  <Link to=\"#\">terms and conditions</Link>\n                </Small>\n              </FlexBox>\n\n              <Button\n                variant=\"contained\"\n                fullWidth\n                type=\"submit\"\n                disabled={\n                  password !== confirmPassword || !agreed || !validatePassword(password)\n                }\n                onClick={handleSubmit}\n              >\n                Submit\n              </Button>\n\n            </Stack>\n          </form>\n        </Box>\n      </FlexRowAlign>\n    </RootLayout>\n  );\n};\n\nexport default NewPassword;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}