{"ast":null,"code":"import { createTheme, responsiveFontSizes } from \"@mui/material\";\nimport merge from \"lodash/merge\";\nimport { THEMES } from \"../constants\";\nimport components from \"./components\";\nimport { shadows } from \"./shadows\";\nimport themesOptions from \"./themeOptions\";\nimport { Avenir } from \"../cutomfonts/FontsFree-Net-AvenirLTStd-Black.ttf\";\nconst baseOptions = {\n  direction: \"ltr\",\n  typography: {},\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 900,\n      lg: 1200,\n      xl: 1536\n    }\n  }\n};\nexport const createCustomTheme = settings => {\n  /**\n   * settings.theme value is 'light' or 'dark'\n   * update settings in contexts/settingsContext.tsx\n   */\n  let themeOptions = themesOptions[settings.theme];\n  if (!themeOptions) {\n    themeOptions = themesOptions[THEMES.LIGHT];\n  }\n  const mergedThemeOptions = merge({}, baseOptions, themeOptions, {\n    direction: settings.direction\n  });\n  let theme = createTheme(mergedThemeOptions); // set shadows\n\n  theme.shadows = shadows(theme); // set components\n\n  theme.components = components(theme);\n  if (settings.responsiveFontSizes) {\n    theme = responsiveFontSizes(theme);\n  }\n  return theme;\n};","map":{"version":3,"names":["createTheme","responsiveFontSizes","merge","THEMES","components","shadows","themesOptions","Avenir","baseOptions","direction","typography","breakpoints","values","xs","sm","md","lg","xl","createCustomTheme","settings","themeOptions","theme","LIGHT","mergedThemeOptions"],"sources":["/workspaces/v4/src/theme/index.js"],"sourcesContent":["import { createTheme, responsiveFontSizes } from \"@mui/material\";\nimport merge from \"lodash/merge\";\nimport { THEMES } from \"../constants\";\nimport components from \"./components\";\nimport { shadows } from \"./shadows\";\nimport themesOptions from \"./themeOptions\";\nimport {Avenir} from \"../cutomfonts/FontsFree-Net-AvenirLTStd-Black.ttf\"\nconst baseOptions = {\n  direction: \"ltr\",\n  typography: {},\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 900,\n      lg: 1200,\n      xl: 1536\n    }\n  }\n};\nexport const createCustomTheme = settings => {\n  /**\n   * settings.theme value is 'light' or 'dark'\n   * update settings in contexts/settingsContext.tsx\n   */\n  let themeOptions = themesOptions[settings.theme];\n\n  if (!themeOptions) {\n    themeOptions = themesOptions[THEMES.LIGHT];\n  }\n\n  const mergedThemeOptions = merge({}, baseOptions, themeOptions, {\n    direction: settings.direction\n  });\n  let theme = createTheme(mergedThemeOptions); // set shadows\n\n  theme.shadows = shadows(theme); // set components\n\n  theme.components = components(theme);\n\n  if (settings.responsiveFontSizes) {\n    theme = responsiveFontSizes(theme);\n  }\n\n  return theme;\n};"],"mappings":"AAAA,SAASA,WAAW,EAAEC,mBAAmB,QAAQ,eAAe;AAChE,OAAOC,KAAK,MAAM,cAAc;AAChC,SAASC,MAAM,QAAQ,cAAc;AACrC,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,SAAQC,MAAM,QAAO,mDAAmD;AACxE,MAAMC,WAAW,GAAG;EAClBC,SAAS,EAAE,KAAK;EAChBC,UAAU,EAAE,CAAC,CAAC;EACdC,WAAW,EAAE;IACXC,MAAM,EAAE;MACNC,EAAE,EAAE,CAAC;MACLC,EAAE,EAAE,GAAG;MACPC,EAAE,EAAE,GAAG;MACPC,EAAE,EAAE,IAAI;MACRC,EAAE,EAAE;IACN;EACF;AACF,CAAC;AACD,OAAO,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;EAC3C;AACF;AACA;AACA;EACE,IAAIC,YAAY,GAAGd,aAAa,CAACa,QAAQ,CAACE,KAAK,CAAC;EAEhD,IAAI,CAACD,YAAY,EAAE;IACjBA,YAAY,GAAGd,aAAa,CAACH,MAAM,CAACmB,KAAK,CAAC;EAC5C;EAEA,MAAMC,kBAAkB,GAAGrB,KAAK,CAAC,CAAC,CAAC,EAAEM,WAAW,EAAEY,YAAY,EAAE;IAC9DX,SAAS,EAAEU,QAAQ,CAACV;EACtB,CAAC,CAAC;EACF,IAAIY,KAAK,GAAGrB,WAAW,CAACuB,kBAAkB,CAAC,CAAC,CAAC;;EAE7CF,KAAK,CAAChB,OAAO,GAAGA,OAAO,CAACgB,KAAK,CAAC,CAAC,CAAC;;EAEhCA,KAAK,CAACjB,UAAU,GAAGA,UAAU,CAACiB,KAAK,CAAC;EAEpC,IAAIF,QAAQ,CAAClB,mBAAmB,EAAE;IAChCoB,KAAK,GAAGpB,mBAAmB,CAACoB,KAAK,CAAC;EACpC;EAEA,OAAOA,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"module"}