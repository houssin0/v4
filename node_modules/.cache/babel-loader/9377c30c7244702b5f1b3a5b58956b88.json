{"ast":null,"code":"var _jsxFileName = \"/workspaces/v4/src/pages/images-dermatologie/image-grid.jsx\",\n  _s = $RefreshSig$();\n// ImageGrid.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Button, Grid, styled, MenuItem, Menu } from \"@mui/material\";\nimport FlexBox from \"components/flexbox/FlexBox\";\nimport SearchInput from \"components/SearchInput\";\nimport ImageCard from \"./image-card\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { ImageList } from \"./image-list\";\nimport { DiseaseList } from \"../diseases-dermatologie/disease-list\";\n\n// styled component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledFlexBox = styled(FlexBox)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    marginBottom: 20,\n    [theme.breakpoints.down(500)]: {\n      width: \"100%\",\n      \"& .MuiInputBase-root\": {\n        maxWidth: \"100%\"\n      },\n      \"& .MuiButton-root\": {\n        width: \"100%\",\n        marginTop: 15\n      }\n    }\n  };\n});\nconst ImageGrid = () => {\n  _s();\n  // change navbar title\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // const handleAddImage = () => navigate(\"/dashboard/add-image\");\n\n  // State for managing filter and sort anchor elements\n  const [filterAnchorEl, setFilterAnchorEl] = useState < null | HTMLElement > null;\n  const [sortAnchorEl, setSortAnchorEl] = useState < null | HTMLElement > null;\n  const [selectedDisease, setSelectedDisease] = useState < string > \"Filter\";\n  const [searchTerm, setSearchTerm] = useState < string > \"\";\n  const [sortOption, setSortOption] = useState < string > \"Sort\";\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const option = params.get('option') || 'Sort';\n    const disease = params.get('disease') || 'Filter';\n    setSortOption(option);\n    setSelectedDisease(disease);\n  }, [location.search]);\n  const handleSearch = term => {\n    setSearchTerm(term);\n  };\n\n  // Handler functions for filter and sort clicks\n  const handleFilterClick = event => {\n    setFilterAnchorEl(event.currentTarget);\n  };\n  const handleSortClick = event => {\n    setSortAnchorEl(event.currentTarget);\n  };\n\n  // Close function for both menus\n  const handleClose = () => {\n    setFilterAnchorEl(null);\n    setSortAnchorEl(null);\n  };\n  const handleDiseaseSelect = disease => {\n    setSelectedDisease(disease);\n    setFilterAnchorEl(null);\n    const params = new URLSearchParams(location.search);\n    if (disease !== \"Filter\") {\n      params.set('disease', disease);\n    } else {\n      params.delete('disease');\n    }\n    navigate(`?${params.toString()}`, {\n      replace: true\n    });\n  };\n  const handleSort = option => {\n    setSortOption(option);\n    setSortAnchorEl(null);\n    const params = new URLSearchParams(location.search);\n    if (option !== \"None\") {\n      params.set('option', option);\n    } else {\n      params.delete('option');\n    }\n    navigate(`?${params.toString()}`, {\n      replace: true\n    });\n  };\n  const sortedImages = ImageList.sort((a, b) => {\n    switch (sortOption) {\n      case \"Name\":\n        return a.title.localeCompare(b.title);\n      case \"Newest First\":\n        return new Date(b.date).getTime() - new Date(a.date).getTime();\n      case \"Oldest First\":\n        return new Date(a.date).getTime() - new Date(b.date).getTime();\n      default:\n        return 0;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    pt: 2,\n    pb: 4,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: sortedImages.filter(image => (selectedDisease === \"Filter\" || image.diseaseTitle === selectedDisease) && (searchTerm === \"\" || image.title.toLowerCase().includes(searchTerm.toLowerCase()))).map((image, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(ImageCard, {\n          image: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)\n      }, image.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageGrid, \"gMsdikdDs1f1NUVrv3Ag60oK04k=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ImageGrid;\nexport default ImageGrid;\nvar _c;\n$RefreshReg$(_c, \"ImageGrid\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Grid","styled","MenuItem","Menu","FlexBox","SearchInput","ImageCard","useNavigate","useLocation","ImageList","DiseaseList","StyledFlexBox","theme","justifyContent","alignItems","flexWrap","marginBottom","breakpoints","down","width","maxWidth","marginTop","ImageGrid","navigate","location","filterAnchorEl","setFilterAnchorEl","HTMLElement","sortAnchorEl","setSortAnchorEl","selectedDisease","setSelectedDisease","string","searchTerm","setSearchTerm","sortOption","setSortOption","params","URLSearchParams","search","option","get","disease","handleSearch","term","handleFilterClick","event","currentTarget","handleSortClick","handleClose","handleDiseaseSelect","set","delete","toString","replace","handleSort","sortedImages","sort","a","b","title","localeCompare","Date","date","getTime","filter","image","diseaseTitle","toLowerCase","includes","map","index","id"],"sources":["/workspaces/v4/src/pages/images-dermatologie/image-grid.jsx"],"sourcesContent":["// ImageGrid.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Button, Grid, styled, MenuItem, Menu } from \"@mui/material\";\nimport FlexBox from \"components/flexbox/FlexBox\";\nimport SearchInput from \"components/SearchInput\";\nimport ImageCard from \"./image-card\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { ImageList } from \"./image-list\";\nimport { DiseaseList } from \"../diseases-dermatologie/disease-list\";\n\n// styled component\nconst StyledFlexBox = styled(FlexBox)(({ theme }) => ({\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  flexWrap: \"wrap\",\n  marginBottom: 20,\n  [theme.breakpoints.down(500)]: {\n    width: \"100%\",\n    \"& .MuiInputBase-root\": { maxWidth: \"100%\" },\n    \"& .MuiButton-root\": {\n      width: \"100%\",\n      marginTop: 15,\n    },\n  },\n}));\n\nconst ImageGrid = () => {\n  // change navbar title\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // const handleAddImage = () => navigate(\"/dashboard/add-image\");\n\n  // State for managing filter and sort anchor elements\n  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);\n  const [sortAnchorEl, setSortAnchorEl] = useState<null | HTMLElement>(null);\n  const [selectedDisease, setSelectedDisease] = useState<string>(\"Filter\");\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const [sortOption, setSortOption] = useState<string>(\"Sort\");\n\nuseEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const option = params.get('option') || 'Sort';\n    const disease = params.get('disease') || 'Filter';\n    setSortOption(option);\n    setSelectedDisease(disease);\n}, [location.search]);\n\nconst handleSearch = (term) => {\n    setSearchTerm(term);\n};\n\n  // Handler functions for filter and sort clicks\nconst handleFilterClick = (event) => {\n    setFilterAnchorEl(event.currentTarget);\n};\n\n  const handleSortClick = (event) => {\n    setSortAnchorEl(event.currentTarget);\n  };\n\n  // Close function for both menus\n  const handleClose = () => {\n    setFilterAnchorEl(null);\n    setSortAnchorEl(null);\n  };\n\n  const handleDiseaseSelect = (disease) => {\n    setSelectedDisease(disease);\n    setFilterAnchorEl(null);\n    const params = new URLSearchParams(location.search);\n    if (disease !== \"Filter\") {\n      params.set('disease', disease);\n    } else {\n      params.delete('disease');\n    }\n    navigate(`?${params.toString()}`, { replace: true });\n  };\n\n  const handleSort = (option) => {\n    setSortOption(option);\n    setSortAnchorEl(null);\n    const params = new URLSearchParams(location.search);\n    if (option !== \"None\") {\n      params.set('option', option);\n    } else {\n      params.delete('option');\n    }\n    navigate(`?${params.toString()}`, { replace: true });\n  };\n\n  const sortedImages = ImageList.sort((a, b) => {\n    switch (sortOption) {\n      case \"Name\":\n        return a.title.localeCompare(b.title);\n      case \"Newest First\":\n        return new Date(b.date).getTime() - new Date(a.date).getTime();\n      case \"Oldest First\":\n        return new Date(a.date).getTime() - new Date(b.date).getTime();\n      default:\n        return 0;\n    }\n  });\n\n  return (\n    <Box pt={2} pb={4}>\n      {/* <StyledFlexBox>\n        <SearchInput images={ImageList} onSearch={handleSearch} />\n        <Box>\n          <Button variant=\"outlined\" onClick={handleFilterClick}>\n            {selectedDisease}\n          </Button>\n          <Menu\n            id=\"filter-menu\"\n            anchorEl={filterAnchorEl}\n            open={Boolean(filterAnchorEl)}\n            onClose={handleClose}\n          >\n            <MenuItem onClick={() => handleDiseaseSelect(\"Filter\")}>All</MenuItem>\n            {DiseaseList.map((disease) => (\n              <MenuItem key={disease.id} onClick={() => handleDiseaseSelect(disease.title)}>\n                {disease.title}\n              </MenuItem>\n            ))}\n          </Menu>\n        </Box>\n        <Box>\n          <Button variant=\"outlined\" onClick={handleSortClick}>\n            {sortOption}\n          </Button>\n          <Menu\n            id=\"sort-menu\"\n            anchorEl={sortAnchorEl}\n            open={Boolean(sortAnchorEl)}\n            onClose={handleClose}\n          >\n            <MenuItem onClick={() => handleSort(\"None\")}>None</MenuItem>\n            <MenuItem onClick={() => handleSort(\"Name\")}>Name</MenuItem>\n            <MenuItem onClick={() => handleSort(\"Newest First\")}>Newest First</MenuItem>\n            <MenuItem onClick={() => handleSort(\"Oldest First\")}>Oldest First</MenuItem>\n          </Menu>\n        </Box>\n        <Button variant=\"contained\" onClick={handleAddImage}>\n          Add New Image\n        </Button>\n      </StyledFlexBox> */}\n\n      <Grid container spacing={3}>\n        {sortedImages.filter((image) =>\n          (selectedDisease === \"Filter\" || image.diseaseTitle === selectedDisease) &&\n          (searchTerm === \"\" || image.title.toLowerCase().includes(searchTerm.toLowerCase()))\n        ).map((image, index) => (\n          <Grid item xs={12} sm={6} md={4} key={image.id}>\n            <ImageCard image={image} />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ImageGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}